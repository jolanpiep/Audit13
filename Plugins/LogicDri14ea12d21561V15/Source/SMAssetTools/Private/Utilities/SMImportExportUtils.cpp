// Copyright Recursoft LLC. All Rights Reserved.

#include "Utilities/SMImportExportUtils.h"

#include "Graph/Nodes/SMGraphNode_Base.h"
#include "Utilities/SMPropertyUtils.h"

#include "UObject/UnrealType.h"

bool LD::ImportExportUtils::ShouldPropertyBeImportedOrExported(const FProperty* InProperty, const UObject* InOwningObject)
{
	check(InProperty);

	// Always include or exclude properties explicitly marked for export.
	if (InProperty->HasMetaData(TEXT("NoLogicDriverExport")))
	{
		return false;
	}

	if (InProperty->HasMetaData(TEXT("LogicDriverExport")))
	{
		return true;
	}

	// If this is in a container check if the owning property is valid to import or export.
	bool bInValidContainer = false;
	if (const FProperty* OwnerProperty = InProperty->GetOwnerProperty())
	{
		if (OwnerProperty != InProperty &&
			(OwnerProperty->IsA<FArrayProperty>()
				|| OwnerProperty->IsA<FMapProperty>()
				|| OwnerProperty->IsA<FSetProperty>()))
		{
			bInValidContainer = ShouldPropertyBeImportedOrExported(OwnerProperty, InOwningObject);
		}
	}

	if (bInValidContainer ||
		// Always accept real graph properties, but avoid if this property was generated by the SMKismetCompiler.
		(LD::PropertyUtils::IsPropertyGraphProperty(InProperty) && !InProperty->GetName().StartsWith(TEXT("LD_GEN_"))))
	{
		return true;
	}

	if (InOwningObject && InOwningObject->IsA<UEdGraphNode>())
	{
		// Check key base properties of graph nodes.
		
		const FName PropName = InProperty->GetFName();

		if (!InOwningObject->GetClass()->IsChildOf(USMGraphNode_Base::StaticClass()))
		{
			// Positional and size coordinates only relevant for generic nodes.
			if (PropName == GET_MEMBER_NAME_CHECKED(UEdGraphNode, NodePosX)
				|| PropName == GET_MEMBER_NAME_CHECKED(UEdGraphNode, NodePosY)
				|| PropName == GET_MEMBER_NAME_CHECKED(UEdGraphNode, NodeWidth)
				|| PropName == GET_MEMBER_NAME_CHECKED(UEdGraphNode, NodeHeight))
			{
				return true;
			}
		}

		// All nodes should check for comments.
		if (PropName == GET_MEMBER_NAME_CHECKED(UEdGraphNode, NodeComment)
			|| PropName == GET_MEMBER_NAME_CHECKED(UEdGraphNode, bCommentBubblePinned)
			|| PropName == GET_MEMBER_NAME_CHECKED(UEdGraphNode, bCommentBubbleVisible))
		{
			return true;
		}
	}

	return (InProperty->HasAnyPropertyFlags(CPF_Edit) || InProperty->HasAnyPropertyFlags(CPF_BlueprintVisible) ||
			(InProperty->HasAnyPropertyFlags(CPF_ContainsInstancedReference))) &&
			!InProperty->HasAnyPropertyFlags(CPF_Transient) && !InProperty->HasMetaData(TEXT("InstancedTemplate"));
}
